package com.ozzero;


/**
 * {@code myList} - —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–Ω–æ–≥–æ {@code LinkedList}. 
 * 
 * 
 * <p> 1. –ß–∏—Å–ª–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Å–ø–∏—Å–∫–µ ‚úîÔ∏è {@link #size} 
 * <p> 2. –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä ‚úîÔ∏è {@link #myList(int)}
 * <p> 3. –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è ‚úîÔ∏è {@link #myList(myList)}
 * <p> 4. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞  ‚úîÔ∏è {@link #pushBack(Object)} {@link #pushFront(Object)}
 * <p> 5. –£–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ –Ω–∞—á–∞–ª–∞ —Å–ø–∏—Å–∫–∞ ‚úîÔ∏è {@link #popBack()} {@link #popFront()}
 * <p> 6. –£–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é ‚úîÔ∏è {@link #erase(Object)}
 * <p> 7. –û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ ‚úîÔ∏è {@link #clear()}
 * <p> 8. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è ‚úîÔ∏è
 */
public class myList<T> {
    private T value = null;
    private int size = 0;
    private myList<T> next = null;
    // private myList prev = null; // –£—Å–ª–æ–≤–∏—è –∑–∞–¥–∞—á–∏ —Å—Ç–æ—è—Ç –ø—Ä–æ –æ–¥–Ω–æ—Å–≤—è–∑–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫, —á—Ç–æ —Å–∏–ª—å–Ω–æ —É–ø—Ä–æ—â–∞–µ—Ç —Ä–∞–±–æ—Ç—É

    // Constructors
    public myList(int n) {
        this.size = n;
        this.next = new myList<T>(n, 1);
    }

    public myList() {
        this.size = 0;
        this.next = null;
    }

    public myList(myList<T> other) { 
        this.value = other.value;
        this.size = other.size;
        this.next = (other.next == null) ? null : new myList<>(other.next);
    }

    private myList(int n, int c) {
        this.size = -1;
        this.next = (c == n - 1) ? null : new myList<T>(n, c + 1);
    }

    // Overrides

    // Private methods
    private myList<T> getNode(int index) {
        if(index < 0) {
            throw new IndexOutOfBoundsException();
        }
        
        myList<T> t = this;
        for(int i = 1; i <= index; i++) {
            t = t.next;

            if(t == null) 
                break;
        }

        return t;
    }

    // Public non-static methods
    public T get(int index) {
        if(index >= size || index < 0) {
            throw new IndexOutOfBoundsException();
        }
        
        myList<T> t = this;
        for(int i = 1; i <= index; i++) {
            t = t.next;
        }

        return t.value;
    }
    

    public void set(int index, T obj) {
        myList<T> t = getNode(index);
        t.value = obj;
    }

    /**
     * –í—Å—Ç–∞–≤–∫–∞ –≤ –Ω–∞—á–∞–ª–æ
     */
    public void pushFront(T obj) {
        myList<T> node = new myList<>();
        node.value = this.value;        // –ü–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ —Ç–∞–∫, —è –æ—Å—Ç–∞–≤–ª—é –∫–∞–∫ –∫–æ–ø–∏—Ä–∞–π—Ç
        node.next = this.next;
        node.size = this.size;

        this.value = obj;
        this.next = node;

        this.size += 1;
    }

    /**
     * –í—Å—Ç–∞–≤–∫–∞ –≤ –∫–æ–Ω–µ—Ü
     */
    public void pushBack(T obj) {
        myList<T> node = new myList<>();
        node.value = obj;
        myList<T> t = getNode(this.size - 1); 

        this.size += 1;
        t.next = node; // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ–Ω–µ—Ü
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏ —É–¥–∞–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç
     * @return T
     */
    public T popBack() {
        if(this.size == 0) 
            throw new IndexOutOfBoundsException("Size of list equal 0");
        if(this.size > 1) {
            myList<T> t = getNode(this.size - 2);
            T r = t.next.value;
            t.next = null;
            this.size -= 1;
            return r;
        }
        else {
            T r = this.value;
            this.value = null;
            this.size = 0;
            return r;
        }
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏ —É–¥–∞–ª—è–µ—Ç –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
     * @return T
     */
    public T popFront() {
        if(this.size == 0) 
            throw new IndexOutOfBoundsException("Size of list equal 0");
        if(this.size > 1) {
            myList<T> scnd = getNode(1);
            T r = this.value;
            this.value = scnd.value;
            this.next = getNode(2);
            this.size -= 1;
            return r;
        }
        else {
            T r = this.value;
            this.value = null;
            this.size = 0;
            return r;
        }
    }

    /**
     * –£–¥–∞–ª—è–µ—Ç –ø–µ—Ä–≤–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –∏–Ω–¥–µ–∫—Å, –∏–ª–∏ -1 –≤ —Å–ª—É—á–∞–µ –æ—Ç—Å—É—Ç—Å–≤–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞
     * @param obj
     */
    public int erase(T obj) {
        myList<T> t = this;

        if(this.size <= 1) { // –¢–æ–ª—å–∫–æ 1 —ç–ª–µ–º–µ–Ω—Ç
            if(this.value.equals(obj)) {
                this.value = null;
                this.size = 0;
                return 0;
            }
            return -1;
        }

        for(int i = 0; i < this.size; i++) {
            if(t.value.equals(obj)) {
                this.size -= 1;
                myList<T> target = getNode(i);
                myList<T> from = getNode(Math.max(i - 1, 0));
                myList<T> to = getNode(Math.min(i + 1, this.size - 1));

                if(i == 0) {
                    this.value = to.value;
                    target = to;
                    to = getNode(i + 2);
                }

                target.value = null; // –û–±–Ω—É–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞
                target.next = null;
                
                from.next = to; // –ü–µ—Ä–µ–∫–∏–¥–∫–∞ —Å–≤—è–∑–∏

                return i;
            }

            t = t.next;
        }

        return -1;
    }

    public void clear() {
        myList<T> t = this;
        for(int i = 0; i < this.size; i++) {
            t.value = null; // –û—Ç—Ü–µ–ø–ª—è–µ–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã
            t = t.next;
        }
        this.next = null; // –û—Ç—Ü–µ–ø–ª—è–µ–º –≤–µ—Å—å —Ö–≤–æ—Å—Ç
        this.size = 0;
        System.gc(); // –ü—Ä–æ—Å–∏–º —Å–∏—Å—Ç–µ–º—É —Å–æ–±—Ä–∞—Ç—å –º—É—Å–æ—Ä (–Ω—É –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ ü•∫)
    }

    // Getters and Setters
    public int size() {
        return size;
    }
    
}